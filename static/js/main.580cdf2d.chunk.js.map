{"version":3,"sources":["redux/actions/saveOCR.js","redux/reducers/ocr.js","redux/store.js","redux/localStorage.js","components/autocomplete/index.js","components/appBar/page.js","components/appBar/index.js","components/storage/page.js","components/storage/index.js","components/ocr/page.js","components/ocr/index.js","index.js"],"names":["type","saveOCR","ocr","payload","defaultState","savedOCR","reducer","state","saveOCRType","nestedState","push","presistedState","serializedState","window","localStorage","getItem","JSON","parse","error","loadState","combineReducers","snackbar","snackbarReducer","store","createStore","subscribe","stringify","setItem","console","log","saveState","getState","Autocomplete","props","isOpen","this","suggestions","onChangeText","onChangeSelection","text","className","InputBase","placeholder","value","style","width","onChange","event","newText","target","setState","onBlur","setTimeout","onFocus","onKeyPress","key","Paper","square","map","suggestion","MenuItem","id","component","onClick","title","Component","Page","hasAutocomplete","printGlobalState","headerTitle","undefined","showAutocomplete","AppBar","position","Toolbar","Typography","variant","color","IAppBar","bind","history","withRouter","connect","useStyles","makeStyles","theme","root","flexGrow","padding","classes","copyText","isEmpty","length","CssBaseline","Grid","container","spacing","item","xs","index","Box","boxShadow","ListItem","ListItemAvatar","Avatar","ListItemText","primary","filename","secondary","onCopy","Button","Storage","showSnack","label","timeout","mapDispatchToProps","paper","height","paperLeft","marginRight","marginLeft","marginTop","paperRight","overflow","cardRoot","marginBottom","listRoot","backgroundColor","palette","background","handleChange","generateText","uploads","documents","acceptedFiles","dropzoneClass","showAlerts","List","confidenceScoreText","confidence","Card","CardHeader","avatar","subheader","CardMedia","src","CardContent","CardActions","OCR","some","i","Tesseract","recognize","lang","catch","err","then","results","patterns","match","concat","objectURL","pattern","files","tmpUploads","hasOwnProperty","upload","name","URL","createObjectURL","goTo","path","Root","from","to","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.580cdf2d.chunk.js","sourcesContent":["export const type = 'saveOCR';\n\n// Accion\nconst saveOCR = ocr => {\n    return {\n        type,\n        payload: ocr,\n    };\n};\n\nexport default saveOCR;","import { type as saveOCRType } from '../actions/saveOCR';\n\nconst defaultState = {\n    savedOCR: []\n};\n\nfunction reducer(state = defaultState, { type, payload }) {\n    switch (type) {\n        case saveOCRType: {\n            let nestedState = state.savedOCR;\n            nestedState.push(payload);\n            state.savedOCR = nestedState;\n            return state;\n        }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import { createStore, combineReducers } from 'redux';\n\nimport { snackbarReducer } from 'react-redux-snackbar';\n\nimport ocr from './reducers/ocr';\nimport { loadState, saveState } from './localStorage'\n\n\nconst presistedState = loadState();\nconst reducer = combineReducers({\n    ocr,\n    snackbar: snackbarReducer,\n});\n\nconst store = createStore(\n    reducer,\n    presistedState\n);\n\nstore.subscribe(() => {\n    saveState(store.getState());\n});\n\nexport default store;\n","export const loadState = () => {\n    try {\n        const serializedState = window.localStorage.getItem('state');\n        if (serializedState === null) {\n            return undefined;\n        }\n        return JSON.parse(serializedState);\n    } catch (error) {\n        return undefined;\n    }\n}\n\nexport const saveState = (state) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        window.localStorage.setItem('state', serializedState);\n    } catch (error) {\n        console.log(error);\n    }\n}","import React, { Component } from 'react';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport './style.css';\n\nclass Autocomplete extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: false,\n        };\n    }\n\n    render() {\n        const {\n            suggestions,\n            onChangeText,\n            onChangeSelection,\n            text,\n        } = this.props;\n        const {\n            isOpen,\n        } = this.state;\n\n        return (\n            <div className=\"main-container\">\n                <div className=\"container-icon\">\n                    <SearchIcon />\n                </div>\n                <InputBase\n                    placeholder=\"Search…\"\n                    value={text}\n                    style={{ width: '100%' }}\n                    onChange={(event) => {\n                        const newText = event.target.value;\n\n                        onChangeText(newText);\n\n                        if (!isOpen && newText) {\n                            this.setState({ isOpen: true });\n                        } else if (isOpen && !newText) {\n                            this.setState({ isOpen: false });\n                        }\n                    }}\n                    onBlur={() => {\n                        setTimeout(() => this.setState({ isOpen: false }), 100);\n                    }}\n                    onFocus={() => {\n                        if (text) {\n                            this.setState({ isOpen: true });\n                        }\n                    }}\n                    onKeyPress={(event) => {\n                        if (event.key === 'Enter' && text) {\n                            onChangeSelection(text);\n                        }\n                    }}\n                />\n                {isOpen &&\n                <Paper className=\"container-results\" square>\n                    {suggestions.map(suggestion =>\n                    <MenuItem\n                        key={suggestion.id}\n                        component=\"div\"\n                        onClick={() => {\n                            onChangeSelection(suggestion.title);\n                            this.setState({ isOpen: false });\n                        }}\n                    >\n                        {suggestion.title}\n                    </MenuItem>)}\n                </Paper>}\n            </div>\n        );\n    }\n}\n\nexport default Autocomplete;","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Autocomplete from '../autocomplete';\nimport './style.css'\n\nfunction Page(props) {\n\n    const {\n        title,\n        hasAutocomplete,\n        text,\n        suggestions,\n        onChangeText,\n        onChangeSelection,\n        printGlobalState\n    } = props;\n\n    let headerTitle = title !== undefined ? title : 'React Redux SandBox';\n    let showAutocomplete = hasAutocomplete !== undefined ? hasAutocomplete : true;\n\n    return (\n        <AppBar position=\"static\">\n            <Toolbar className=\"appbar\">\n                <Typography variant=\"h6\" color=\"inherit\">\n                    {headerTitle}\n                </Typography>\n\n                {showAutocomplete && <Autocomplete\n                    text={text}\n                    suggestions={suggestions}\n                    onChangeText={onChangeText}\n                    onChangeSelection={onChangeSelection}\n                />}\n                <AccountCircle onClick={printGlobalState} />\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default Page;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Page from './page';\n\n\nclass IAppBar extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: '',\n        };\n\n        this.onChangeText = this.onChangeText.bind(this);\n        this.onChangeSelection = this.onChangeSelection.bind(this);\n        this.printGlobalState = this.printGlobalState.bind(this);\n    }\n\n    onChangeText(text) {\n        this.setState({ text });\n    }\n\n    printGlobalState = () => {\n        console.log(this.props);\n    }\n\n    onChangeSelection(text) {\n        this.setState({ text });\n        this.props.history.push('/results');\n    }\n\n    render() {\n        const { text } = this.state;\n        const { title, hasAutocomplete } = this.props;\n\n        return (\n            <Page\n                printGlobalState={this.printGlobalState}\n                hasAutocomplete={hasAutocomplete}\n                title={title}\n                text={text}\n                onChangeText={this.onChangeText}\n                onChangeSelection={this.onChangeSelection}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        suggestions: state.suggestions,\n        ocr: state.ocr,\n    };\n};\n\n\n// Forma compleja\n//const mapDispatchToProps = (dispatch) => {\n//    return {\n//        findSuggestions: (text) => dispatch(findSuggestions(text)),\n//    };\n//}\n\n//Forma simple\nconst mapDispatchToProps = {\n}\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(IAppBar)\n);","import React, { Fragment } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '../appBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, Box, ListItem, Button, ListItemAvatar, Avatar, ListItemText } from '@material-ui/core';\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\n\nimport './style.css'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        padding: '1rem'\n    }\n}));\n\nfunction Page(props) {\n    const classes = useStyles();\n    const {\n        savedOCR,\n        copyText\n    } = props;\n\n    const isEmpty = savedOCR.length === 0;\n\n    return (\n        <Fragment>\n            <CssBaseline />\n            <AppBar title={'Storage'} hasAutocomplete={false} />\n            <Grid container className={classes.root} spacing={2}>\n                <Grid item xs={12}>\n                    {isEmpty ?\n                        <Typography variant=\"h5\" component=\"h3\" className=\"page-message\">\n                            No items saved\n                    </Typography>\n                        :\n                        savedOCR.map((value, index) => {\n                            return (\n                                <Box boxShadow={3} key={index}>\n                                    <ListItem>\n                                        <ListItemAvatar>\n                                            <Avatar><InsertDriveFileIcon /></Avatar>\n                                        </ListItemAvatar>\n                                        <ListItemText\n                                            primary={value.filename}\n                                            secondary={value.text}\n                                        />\n                                        <CopyToClipboard text={value['text']} onCopy={copyText}>\n                                            <Button color=\"primary\"><FileCopyIcon /></Button>\n                                        </CopyToClipboard>\n                                    </ListItem>\n                                </Box>\n                            )\n                        })\n                    }\n                </Grid>\n            </Grid>\n        </Fragment>\n    );\n}\n\nexport default Page;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { showSnack } from 'react-redux-snackbar';\n\nimport Page from './page';\n\nclass Storage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.copyText = this.copyText.bind(this);\n    }\n\n    copyText = () => {\n        this.props.showSnack('copy-text-id', {\n            label: 'Copied!',\n            timeout: 2000,\n        });\n    }\n\n    render() {\n        const { ocr } = this.props;\n        return (\n            <Page\n                savedOCR={ocr.savedOCR}\n                copyText={this.copyText}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ocr: state.ocr,\n    }\n}\n\nconst mapDispatchToProps = {\n    showSnack,\n}\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Storage)\n);\n","import React, { Fragment } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '../appBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Paper, Button, List, ListItem, ListItemText, Box, ListItemAvatar, Avatar, CardContent, Typography, CardMedia, CardHeader, Card, CardActions } from '@material-ui/core';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport './style.css'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        height: 140,\n        width: 100,\n    },\n    paperLeft: {\n        marginRight: 2,\n        marginLeft: 25,\n        marginTop: 20,\n        padding: theme.spacing(4),\n        height: '88vh',\n    },\n    paperRight: {\n        overflow: 'auto',\n        marginRight: 25,\n        marginLeft: 2,\n        marginTop: 20,\n        padding: theme.spacing(4),\n        height: '88vh',\n    },\n    cardRoot: {\n        marginBottom: '1.5rem',\n    },\n    listRoot: {\n        marginTop: '1rem',\n        width: '100%',\n        backgroundColor: theme.palette.background.paper,\n    }\n}));\n\nfunction Page(props) {\n    const classes = useStyles();\n    const {\n        handleChange,\n        generateText,\n        copyText,\n        uploads,\n        documents,\n        saveOCR,\n    } = props;\n\n\n    return (\n        <Fragment>\n            <CssBaseline />\n            <AppBar title={'OCR'} hasAutocomplete={false} />\n            <Grid container className={classes.root} spacing={2}>\n                <Grid item xs={6}>\n                    <Paper className={classes.paperLeft}>\n                        <Grid container>\n                            <Grid item xs={12}>\n                                <DropzoneArea\n                                    onChange={handleChange}\n                                    acceptedFiles={['image/*']}\n                                    dropzoneClass={'dropzone-area'}\n                                    showAlerts={false}\n                                />\n                                <Button variant=\"contained\" color=\"primary\" onClick={generateText} className=\"button ocr-button-generate\">\n                                    Generate\n                                </Button>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <List className={classes.listRoot}>\n                                    {uploads.map((value, index) => {\n                                        return (\n                                            <Box boxShadow={3} key={index}>\n                                                <ListItem>\n                                                    <ListItemAvatar>\n                                                        <Avatar><InsertDriveFileIcon /></Avatar>\n                                                    </ListItemAvatar>\n                                                    <ListItemText primary={value['name']} />\n                                                </ListItem>\n                                            </Box>\n                                        )\n                                    })}\n                                </List>\n                            </Grid>\n                        </Grid>\n                    </Paper>\n                </Grid>\n                <Grid item xs={6}>\n                    <Paper className={classes.paperRight}>\n                        {documents.map((value, index) => {\n                            let confidenceScoreText = <div><strong className='ocr-confidence-score-text'>Confidence score:</strong><span>{value.confidence}</span></div>;\n                            return (\n                                <Card key={index} className={`ocr-card ${classes.cardRoot}`}>\n                                    <CardHeader\n                                        title={value['filename']}\n                                        avatar={<Avatar><InsertDriveFileIcon /></Avatar>}\n                                        subheader={confidenceScoreText}\n                                    />\n                                    <CardMedia\n                                        src={value['objectURL']}\n                                        component='img'\n                                    />\n                                    <CardContent>\n                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                            {value['text']}\n                                        </Typography>\n                                    </CardContent>\n                                    <CardActions>\n                                        <CopyToClipboard text={value['text']} onCopy={copyText}>\n                                            <Button variant=\"contained\" color=\"primary\" className=\"button ocr-button-copy-text\">\n                                                Copy to clipboard\n                                            </Button>\n                                        </CopyToClipboard>\n                                        <Button onClick={() => saveOCR(value['filename'], value['text'])} variant=\"contained\" color=\"primary\" className=\"button ocr-button-save-text\">\n                                            Save text\n                                        </Button>\n                                    </CardActions>\n                                </Card>\n                            )\n                        })}\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Fragment>\n    );\n}\n\nexport default Page;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Tesseract from 'tesseract.js';\nimport { showSnack } from 'react-redux-snackbar';\nimport Page from './page';\nimport saveOCR from '../../redux/actions/saveOCR';\n\nclass OCR extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            uploads: [],\n            patterns: [],\n            documents: [],\n            savedOCR: [],\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.generateText = this.generateText.bind(this);\n        this.saveOCR = this.saveOCR.bind(this);\n        this.copyText = this.copyText.bind(this);\n    }\n\n    copyText = () => {\n        this.props.showSnack('copy-text-id', {\n            label: 'Copied!',\n            timeout: 2000,\n        });\n    }\n\n    saveOCR = (filename, text) => {\n        if (!this.props.ocr.savedOCR.some(item => item.filename === filename)) {\n            this.props.saveOCR({ filename, text });\n            this.props.showSnack('save-text-ocr', {\n                label: 'Saved!',\n                timeout: 2000,\n            });\n        } else {\n            this.props.showSnack('already-save-text-ocr', {\n                label: 'It was already saved!',\n                timeout: 2000,\n            });\n        }\n    }\n\n    generateText = () => {\n        let uploads = this.state.uploads;\n\n        for (let i = 0; i < uploads.length; i++) {\n            Tesseract.recognize(uploads[i]['objectURL'], {\n                lang: 'spa',\n            }).catch(err => {\n                console.log(err);\n            }).then(results => {\n                let confidence = results.confidence;\n                let text = results.text;\n\n                let pattern = /\\b\\w{10,10}\\b/g\n                let patterns = results.text.match(pattern);\n\n                this.setState({\n                    patterns: this.state.patterns.concat(patterns),\n                    documents: this.state.documents.concat({\n                        objectURL: uploads[i]['objectURL'],\n                        filename: uploads[i]['name'],\n                        pattern: patterns,\n                        text: text,\n                        confidence: confidence\n                    })\n                })\n            })\n        }\n    }\n\n    handleChange = (files) => {\n        if (files[0]) {\n            let tmpUploads = [];\n            for (let key in files) {\n                if (!files.hasOwnProperty(key)) continue;\n                let upload = files[key]\n                if (this.state.uploads.some(item => item.name === upload.name)) {\n                    this.props.showSnack('duplicate-file', {\n                        label: 'A file with the same name already exists, only the first one will be processed.',\n                        timeout: 2000,\n                    });\n                } else {\n                    tmpUploads.push({\n                        'objectURL': URL.createObjectURL(upload),\n                        'name': files[key]['name']\n                    });\n                    this.setState({\n                        uploads: tmpUploads\n                    })\n                }\n            }\n        } else {\n            this.setState({\n                uploads: []\n            })\n        }\n    }\n\n    render() {\n        const {\n            uploads,\n            documents,\n            patterns\n        } = this.state;\n\n        return (\n            <Page\n                handleChange={this.handleChange}\n                generateText={this.generateText}\n                saveOCR={this.saveOCR}\n                copyText={this.copyText}\n                uploads={uploads}\n                documents={documents}\n                patterns={patterns}\n                goTo={(path) => {\n                    this.props.history.push(path);\n                }}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ocr: state.ocr,\n    }\n}\n\nconst mapDispatchToProps = {\n    showSnack,\n    saveOCR,\n}\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(OCR)\n);","import React from 'react';\nimport ReactDom from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Route, Redirect, Switch} from 'react-router-dom';\nimport { Snackbar } from 'react-redux-snackbar';\nimport store from './redux/store';\n\nimport Storage from './components/storage';\nimport OCR from './components/ocr';\n\nconst Root = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <Switch>\n                <Route path='/ocr' component={OCR} />\n                <Route path='/storage' component={Storage} />\n                <Redirect from='/' to='/ocr' />\n            </Switch>\n        </BrowserRouter>\n        <Snackbar/>\n    </Provider>\n);\n\nReactDom.render(Root, document.getElementById('root'));\n"],"sourceRoot":""}